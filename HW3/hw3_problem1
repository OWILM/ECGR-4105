import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import os
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, log_loss
import seaborn as sns
from sklearn.linear_model import SGDClassifier

data = pd.read_csv("ECGR-4105/HW3/diabetes.csv")

# Define explanatory variables (X) and outcome variable (Y)
X = data.iloc[:, :-1].values
Y = data.iloc[:, -1].values

# Split the Data (80% train, 20% test)
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.20, random_state=0)

# Scaling and Standardization
sc_X = StandardScaler()
X_train = sc_X.fit_transform(X_train)
X_test = sc_X.transform(X_test)

# Logistic Regression Model
classifier = LogisticRegression(random_state=0)
classifier.fit(X_train, Y_train)

# Plot Training Results (Loss and Accuracy over Iterations)
# use SGDClassifier with 'log_loss' 
sgd_classifier = SGDClassifier(loss='log_loss', random_state=0)
n_iterations = 1000
train_losses = []
train_accuracies = []

for iteration in range(n_iterations):
    sgd_classifier.partial_fit(X_train, Y_train, classes=np.unique(Y_train))
    y_train_pred_proba = sgd_classifier.predict_proba(X_train)
    loss = log_loss(Y_train, y_train_pred_proba)
    train_losses.append(loss)
    y_train_pred = sgd_classifier.predict(X_train)
    accuracy = accuracy_score(Y_train, y_train_pred)
    train_accuracies.append(accuracy)

# Plotting the training history
plt.figure(figsize=(12, 5))
plt.subplot(1, 2, 1)
plt.plot(range(n_iterations), train_losses, label='Training Loss')
plt.title('Loss over Iterations')
plt.xlabel('Iterations')
plt.ylabel('Log Loss')
plt.grid(True)

plt.subplot(1, 2, 2)
plt.plot(range(n_iterations), train_accuracies, label='Training Accuracy', color='orange')
plt.title('Accuracy over Iterations')
plt.xlabel('Iterations')
plt.ylabel('Accuracy')
plt.grid(True)
plt.tight_layout()
plt.show()

# Report Results on Test Set
Y_pred = classifier.predict(X_test)

accuracy = accuracy_score(Y_test, Y_pred)
precision = precision_score(Y_test, Y_pred)
recall = recall_score(Y_test, Y_pred)
f1 = f1_score(Y_test, Y_pred)

print("\nResults")
print(f"Accuracy:  {accuracy}")
print(f"Precision: {precision}")
print(f"Recall:    {recall}")
print(f"F1 Score:  {f1}")

# Plot the Confusion Matrix
cnf_matrix = confusion_matrix(Y_test, Y_pred)

plt.figure(figsize=(8, 6))
sns.heatmap(pd.DataFrame(cnf_matrix), annot=True, cmap="YlGnBu", fmt='g')
plt.title('Confusion Matrix', y=1.1)
plt.ylabel('Actual Label')
plt.xlabel('Predicted Label')
plt.show()
